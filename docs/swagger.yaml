basePath: /
definitions:
  DTO.SolutionCheatingRateDTO:
    properties:
      cheatingRate:
        type: number
    type: object
  DTO.SolutionDTO:
    properties:
      solution:
        type: string
    type: object
  DTO.SolutionFinalGradeDTO:
    properties:
      finalGrade:
        type: number
    type: object
  DTO.UserDTO:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      roleID:
        type: integer
      surname:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  handler.Error:
    properties:
      message:
        type: string
    type: object
  handler.FileData:
    properties:
      data:
        type: string
      name:
        type: string
    type: object
  handler.FileUpload:
    properties:
      files:
        items:
          $ref: '#/definitions/handler.FileData'
        type: array
      studentTaskID:
        type: integer
    type: object
  models.Report:
    properties:
      clipboard:
        items:
          type: integer
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      logs:
        items:
          type: integer
        type: array
      report:
        items:
          type: integer
        type: array
      updatedAt:
        type: string
    required:
    - clipboard
    - logs
    - report
    type: object
  models.StudentSolution:
    properties:
      cheatingResult:
        type: number
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      finalGrade:
        type: number
      id:
        type: integer
      report:
        $ref: '#/definitions/models.Report'
      reportID:
        type: integer
      solution:
        type: string
      studentTask:
        $ref: '#/definitions/models.StudentTask'
      studentTaskID:
        type: integer
      timeEnd:
        type: string
      timeStart:
        type: string
      updatedAt:
        type: string
    required:
    - solution
    type: object
  models.StudentTask:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      student:
        $ref: '#/definitions/models.User'
      studentID:
        type: integer
      task:
        $ref: '#/definitions/models.Task'
      taskID:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Task:
    properties:
      accessFrom:
        type: string
      accessTo:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      teacher:
        $ref: '#/definitions/models.User'
      teacherID:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    required:
    - description
    - title
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      roleID:
        type: integer
      surname:
        type: string
      updatedAt:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UserRole:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for Tracker Application
  title: Tracker API
  version: "1.0"
paths:
  /api/reports:
    get:
      consumes:
      - application/json
      description: get a list of all reports, accessible only by admins
      operationId: get-all-reports
      produces:
      - application/json
      responses:
        "200":
          description: List of all reports
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all reports
      tags:
      - reports
  /api/reports/createReport:
    post:
      consumes:
      - application/json
      description: create a new report with uploaded files
      operationId: create-report
      parameters:
      - description: Files for the report
        in: body
        name: files
        required: true
        schema:
          $ref: '#/definitions/handler.FileUpload'
      produces:
      - application/json
      responses:
        "200":
          description: Report creation successful with data ID returned
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a report
      tags:
      - reports
  /api/solutions:
    get:
      consumes:
      - application/json
      description: get a list of all solutions, accessible only by admins
      operationId: get-all-solutions
      produces:
      - application/json
      responses:
        "200":
          description: List of all solutions
          schema:
            items:
              $ref: '#/definitions/models.StudentSolution'
            type: array
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all solutions
      tags:
      - solutions
  /api/solutions/generate-cheating-rate/{id}:
    put:
      consumes:
      - application/json
      description: update the cheating rate for a specific solution, accessible only
        by admins and teachers
      operationId: update-solution-cheating-rate
      parameters:
      - description: Solution ID
        in: path
        name: id
        required: true
        type: integer
      - description: Cheating rate data
        in: body
        name: cheatingRate
        required: true
        schema:
          $ref: '#/definitions/DTO.SolutionCheatingRateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Cheating rate generated and updated successfully
        "400":
          description: Invalid parameter or bad request
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Update the cheating rate of a solution
      tags:
      - solutions
  /api/solutions/on-student-task/{id}:
    post:
      consumes:
      - application/json
      description: create a new solution for a student task
      operationId: create-solution
      parameters:
      - description: Student Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Solution details
        in: body
        name: solutionText
        required: true
        schema:
          $ref: '#/definitions/DTO.SolutionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Solution created successfully with solution ID returned
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error or fail to get solution context
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a solution
      tags:
      - solutions
  /api/solutions/solved-task/{id}:
    get:
      consumes:
      - application/json
      description: retrieve solutions submitted by students on a solved task, accessible
        only by teachers and admins
      operationId: get-student-solutions-on-solved-task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of solutions submitted by students on the solved task
          schema:
            items:
              $ref: '#/definitions/models.StudentSolution'
            type: array
        "400":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get student solutions on solved task
      tags:
      - solutions
  /api/solutions/update-final-grade/{id}:
    put:
      consumes:
      - application/json
      description: update the final grade for a specific solution, accessible only
        by the task's teacher or admins
      operationId: update-solution-final-grade
      parameters:
      - description: Solution ID
        in: path
        name: id
        required: true
        type: integer
      - description: Final grade data
        in: body
        name: grade
        required: true
        schema:
          $ref: '#/definitions/DTO.SolutionFinalGradeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Final grade updated successfully
        "400":
          description: Invalid parameter or bad request
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Update the final grade of a solution
      tags:
      - solutions
  /api/tasks:
    get:
      consumes:
      - application/json
      description: get a list of all tasks
      operationId: get-all-tasks
      produces:
      - application/json
      responses:
        "200":
          description: List of all tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all tasks
      tags:
      - tasks
  /api/tasks/{id}:
    get:
      consumes:
      - application/json
      description: get a specific task by its ID
      operationId: get-task-by-id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Detailed information about a task
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a task by ID
      tags:
      - tasks
  /api/tasks/create:
    post:
      consumes:
      - application/json
      description: create a new task
      operationId: create-task
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new task
      tags:
      - tasks
  /api/tasks/delete/{id}:
    delete:
      consumes:
      - application/json
      description: delete a specific task, accessible only by the task's creator or
        an admin
      operationId: delete-task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
        "400":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a task
      tags:
      - tasks
  /api/tasks/student/{id}:
    get:
      consumes:
      - application/json
      description: get all tasks assigned to a specific student
      operationId: get-all-student-tasks
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks assigned to the student
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "400":
          description: Invalid student ID
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all tasks for a specific student
      tags:
      - tasks
  /api/tasks/teacher/{id}:
    get:
      consumes:
      - application/json
      description: get all tasks created by a specific teacher
      operationId: get-all-teacher-tasks
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks created by the teacher
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "400":
          description: Invalid teacher ID
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all tasks for a specific teacher
      tags:
      - tasks
  /api/tasks/update/{id}:
    put:
      consumes:
      - application/json
      description: update details of a specific task, accessible only by the task's
        creator or an admin
      operationId: update-task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task details to update
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
        "400":
          description: Invalid parameter or bad request
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Update a task
      tags:
      - tasks
  /api/users:
    get:
      consumes:
      - application/json
      description: get all users
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: List of all users
          schema:
            items:
              $ref: '#/definitions/DTO.UserDTO'
            type: array
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
  /api/users/{studentId}/add-to-task/{taskId}:
    post:
      consumes:
      - application/json
      description: add student to task
      operationId: add-student-to-task
      parameters:
      - description: Task ID
        in: path
        name: taskID
        required: true
        type: integer
      - description: Student ID
        in: path
        name: studentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added student to task
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Task or user not found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Add student to task
      tags:
      - users
  /api/users/on-solution/{id}:
    get:
      consumes:
      - application/json
      description: retrieve the student associated with a specific solution, accessible
        only by teachers and admins
      operationId: get-student-by-solution-id
      parameters:
      - description: Solution ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Student associated with the solution
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid solution ID
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get student by solution ID
      tags:
      - users
  /api/users/profile:
    get:
      consumes:
      - application/json
      description: get user
      operationId: get-user
      produces:
      - application/json
      responses:
        "200":
          description: The profile of the user
          schema:
            $ref: '#/definitions/DTO.UserDTO'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get user
      tags:
      - users
  /api/users/students:
    get:
      consumes:
      - application/json
      description: retrieve a list of all students, accessible only by teachers and
        admins
      operationId: get-all-students
      produces:
      - application/json
      responses:
        "200":
          description: List of all students
          schema:
            items:
              $ref: '#/definitions/DTO.UserDTO'
            type: array
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all students
      tags:
      - users
  /api/users/teacher/{id}/students:
    get:
      consumes:
      - application/json
      description: retrieve all students associated with a specific teacher
      operationId: get-students-by-teacher-id
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of students taught by the teacher
          schema:
            items:
              $ref: '#/definitions/DTO.UserDTO'
            type: array
        "400":
          description: Invalid teacher ID
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get students by teacher ID
      tags:
      - users
  /auth/signin:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/DTO.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.Error'
      summary: SignIn
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.Error'
      summary: SignUp
      tags:
      - auth
  /get-solution-on-student-task/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific student solution on a given task by student task
        ID
      operationId: get-student-solution-on-task
      parameters:
      - description: Student Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Student solution for the specified task
          schema:
            $ref: '#/definitions/models.StudentSolution'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get student solution on task
      tags:
      - solutions
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
